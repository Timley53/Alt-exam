def mark_book_as_returned(
        record_id: UUID, return_record: Annotated[return_date, Body(...)]
    ):
        record_id = str(record_id)

        record_found = False
        for recordkey, record in borrow_records_db.items():
            if recordkey == record_id and not record["return_date"]:
                record_found = True

                if return_record.date_returned is not None:
                    valid_date = return_record.date_returned
                    record["return_date"] = valid_date

                    if record["return_date"] > date.today():
                        raise HTTPException(
                            status_code=400,
                            detail="Invalid date. Please enter a past date.",
                        )
                else:
                    record["return_date"] = date.today()

                books[record["book_id"]]["is_available"] = True

                returned_book = ReturnRecord(
                    record_id=record_id,
                    user_id=record["user_id"],
                    book_id=record["book_id"],
                    borrow_date=record["borrow_date"],
                    return_date=record["return_date"],
                )

                return {
                    "message": "Book has been returned successfully",
                    "return_record": returned_book,
                }

        if not record_found:
            raise HTTPException(
                status_code=404,
                detail="Record not found",
            )
